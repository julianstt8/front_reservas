$viewport: (
  8k: (
    property: (
      min-width: 7680,
      max-width: null,
    ),
  ),
  4k: (
    property: (
      min-width: 3840,
      max-width: 7679,
    ),
  ),
  2k: (
    property: (
      min-width: 1920,
      max-width: 3839,
    ),
  ),
  desktop: (
    property: (
      min-width: 960px,
      max-width: 1919,
    ),
  ),
  tablet: (
    property: (
      max-width: 959px,
      min-width: 640px,
    ),
  ),
  phone: (
    property: (
      max-width: 639px,
      min-width: 0px,
    ),
  ),
) !default;

$measures: (
  vmn: 0.1vmin,
  vmx: 0.1vmax,
  rem: 0.01rem,
  em: 0.01em,
  vh: 0.1vh,
  vw: 0.1vw,
  px: 1px,
  pg: 1%,
);

$sizeBase: "desktop" !default;
$measureList: vmn vmx rem px vh vw pg !default;

@function get-viewport(
  $size,
  $maxWidth: get-property-value($size, "max-width"),
  $minWidth: get-property-value($size, "min-width")
) {
  $media: null;
  @if $minWidth {
    $media: $media + "(min-width: " + $minWidth + ")";
  }
  @if $maxWidth {
    @if $minWidth {
      $media: $media + " and ";
    }
    $media: $media + "(max-width: " + $maxWidth + ")";
  }
  @return if($media != null, "only screen and " + $media, null);
}

@mixin use-viewport(
  $size,
  $maxWidth: get-property-value($size, "max-width"),
  $minWidth: get-property-value($size, "min-width")
) {
  @if get-viewport($size, $maxWidth, $minWidth) != null {
    @media #{get-viewport($size, $maxWidth, $minWidth)} {
      @content;
    }
  } @else {
    @content;
  }
}

@mixin generate-measure($size: (), $measureList: $measureList, $name: "measure") {
  @each $msk in $measureList {
    $msv: map-get($measures, $msk);
    @if $msv {
      &-#{$msk} {
        @for $i from 1 through length($size) {
          $v: nth($size, $i);
          --#{$name + if($i == 1, '', $i)}: calc(var(--viewport-#{$msk}-value, #{$msv}) * #{$v});
        }
        @content;
      }
    }
  }
}

@function get-measure($size: 1, $measure: px) {
  $msv: map-get($measures, $measure);
  @return if($msv, $msv * $size, $size * 1px);
}

@function get-property-value($size, $property, $listName: property) {
  $sizes: map-get($viewport, $size);
  @if ($sizes) {
    $lists: map-get($sizes, $listName);
    @if ($lists) {
      @return map-get($lists, $property);
    }
  }
  @return null;
}
